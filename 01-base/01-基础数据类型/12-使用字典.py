

# 总结
# 字典类似c++ map，由字典名，键值，相关联值组成
# 添加键-值对
# del删除键-值对


# 1、字典简单demo
# 来看一个游戏，其中包含一些外星人，这些外星人的颜色和点数各不相同。下面是一个简单
# 的字典，存储了有关特定外星人的信息
print("========================== 字典简单demo")
alien_0 = {'color': 'green', 'points': 5} 
print(alien_0['color']) 
print(alien_0['points'])

# 2、使用字典
# lien_0 = {'color': 'green'}
# 在Python中，字典是一系列键—值对。每个键都与一个值相关联，你可以使用键来访问与之
# 相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何Python对
# 象用作字典中的值。

# 在Python中，字典用放在花括号{}中的一系列键—值对表示
# 键—值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号
# 分隔，而键—值对之间用逗号分隔。在字典中，你想存储多少个键—值对都可以。

# 2.1、访问字典中的值
# 要获取与键相关联的值，可依次指定字典名和放在方括号内的键
print("========================== 访问字典中的值")
alien_0 = {'color': 'green'} 
print(alien_0['color'])


# 2.2、添加键—值对
# 字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用
# 方括号括起的键和相关联的值。
# 下面在字典alien_0中添加两项信息：外星人的x坐标和y坐标，让我们能够在屏幕的特定位
# 置显示该外星人
print("========================== 添加键—值对")
alien_0 = {'color': 'green', 'points': 5} 
print(alien_0) 
alien_0['x_position'] = 0 
alien_0['y_position'] = 25 
print(alien_0)

# 2.3、先创建一个空字典
print("========================== 先创建一个空字典")
alien_0 = {} 
alien_0['color'] = 'green' 
alien_0['points'] = 5
print(alien_0)

# 2.4、修改字典中的值
print("========================== 修改字典中的值")
# 要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值
alien_0 = {'color': 'green'} 
print(alien_0['color']) 
alien_0['color'] = 'yellow' 
print(alien_0['color'])

# 2.5、删除键—值对
# 对于字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除。使用del语句时，
# 必须指定字典名和要删除的键。
print("========================== 删除键—值对")
alien_0 = {'color': 'green', 'points': 5} 
print(alien_0) 
del alien_0['points'] 
print(alien_0)

# 2.6、由类似对象组成的字典
