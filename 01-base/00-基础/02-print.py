
# 区隔符 sep
# 用sep参数来约束print括号里多项内容之间的区隔符
print("谋事在人", "成事在天", "有生命便有希望", sep ="&")

# print()数据的格式化输出
name = "逆境清醒"
print("我的名字是 %s " % name)

i = 2.67145573
print("保留两位小数输出的是%.2f"%(i))

print('%x'%50)
print('%#x'%50)
print('%#X'%50)
# format()函数语法
# 语法：format(value, format_spec='')
# 格式化指定的值，并将其插入字符串的占位符内。

# format() 函数基本用法
# 基本语法是通过 {} 和 : 来代替以前的 %
# 1. 位置替换print('{0} {1}'.format('字符串1','字符串2'))格式，{}调用时，字符串编号顺序从0开始
# 2. 可通过列表索引格式化字符串，{0[1]}中，‘0’ 是必须的
# 3. 可以使用大括号 {} 来转义大括号，{{}}
# 4. 数字和关键字段可以混合使用来传递参数，
# 5. 关键字参数必须位于位置参数之后。
# 6. 省略字段名{}不能和数字形式的字段名同时使用
# 7. format 函数可以接受不限个参数，位置可以不按顺序。 
# 8. 占位符使用大括号 {} 定义。
# 9. 返回值，返回一个格式化的字符串

# 1. 按照先后顺序位置替换
# 主要格式：print('{} {}'.format('字符串1','字符串2'))
# foramt会把参数按位置顺序来填充到字符串中（按照顺序自动分配），第一个参数是0，然后1 ……
print('----------------------------- 按照先后顺序位置替换 -----------------------------')
# 1.1 不指定位置，按默认顺序
print('{} {}'.format('Adversity','Awake'))
# 1.2 empty 占位符
mtext1 = "我的名字叫{}，我已经{}岁了~".format("逆境清醒",100)
print(mtext1)
# 1.3 不指定位置，按默认顺序，{{}}仅代表{}，不占用字符串格式化位置顺序
print('{} {{}} {} {{}} {}'.format('逆境清醒：','不能如愿而行，', '也须尽力而为。'))



# 2. 按照索引进行匹配替换
# 主要格式：print('{0} {1}'.format('字符串1','字符串2'))
# 按索引编号来匹配替换{索引}的值
print('----------------------------- 按照索引进行匹配替换 -----------------------------')
# 2.1 按索引编号来匹配
mtext1 = "我的名字是{0}，我已经{1}岁了~".format("逆境清醒",100)
print(mtext1)
# 2.2 设置指定位置
print('{0} {1}'.format('逆境','清醒'))
print('{1} {0}'.format('逆境','清醒'))
print('{1}{3}:{0},{2}!{3}!'.format('不能如愿而行', '逆境','也须尽力而为','清醒'))



# 3. 按关键字索引进行匹配替换
# 主要格式：print('{关键字索引1} {关键字索引2}'.format(关键字索引1='关键字1',关键字索引2='关键字2'))
print('----------------------------- 按关键字索引进行匹配替换 -----------------------------')
print('ID:{id},Name:{name}'.format(id='No008',name='逆境清醒'))
print("博客名：{name}, 地址：{url}".format(name="逆境清醒", url="https://blog.csdn.net/weixin_69553582"))
print("我今年{age}岁,座右铭{motto}".format(motto="要有勇气做真实的自己",age="100")) # 关键字可以随便放置



# 4. 通过列表索引格式化字符串
# 主要格式：列表名=['列表值1','列表值2','列表值3'...]
# print('{List[列表索引1]},{List[列表索引2]}'.format(List = 列表名))
# 在format格式化时，可使用* 或者 ** 进行对list拆分。
print('----------------------------- 通过列表索引格式化字符串 -----------------------------')
list1=['No008','逆境清醒']
print('ID:{List[0]},Name:{List[1]}'.format(List = list1))
#注意正确使用索引值，否则会得出奇怪的答案
print('ID:{List[1]},Name:{List[0]}'.format(List = list1))


# 5. 通过字典设置格式化字符串
# 主要格式：
# 字典名1={'字典索引1':'字典索引1的值','字典索引2':'字典索引2的值',...}
# print('{字典索引},{字典索引值}'.format(字典名1)) 
# 在format格式化时，可使用 ** 进行对字典拆分



# 三、用对齐及填充的方式格式化
# 1. 左对齐及填充格式化字符串
# :<    左对齐填充
# <是左对齐，后面带宽度，
# : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。
# -表示左对齐
# %-30s: 左对齐，占位符30位
print('----------------------------- 三、用对齐及填充的方式格式化 -----------------------------')
# 1.1 15表示占15个字符，-表示左对齐
print('%-15s'%'逆境清醒', '@')
# 1.2 <表示左对齐, ☆表示用☆号进行填充, 10表示共占10个字符
print('{:☆<10}'.format('逆境清醒'))

# 2. 右对齐及填充格式化字符串
# :>右对齐
# >是右对齐，后面带宽度，
# : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。
# %30s: 右对齐，占位符30位
print('@''{:>10}'.format('逆境清醒'))


# 3. 居中对齐及填充格式化字符串
# :^    居中对齐
# ^是居中对齐，后面带宽度，
# : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。
print("{:☆^30s}".format(" 逆境清醒 ") ) # 居中对齐

# 4. 调用函数对齐及填充格式化字符串
# ljust()函数：左侧对齐
# rjust()函数：右侧对齐
# center()函数：字符串居中对齐
# zfill()函数：右侧对齐， 左侧补0
# 当len(str1)>width时，输全部字符串

# 4.1 字符串左侧对齐， 右侧补❄:
str1 = "逆境清醒"
width = 20
print(str1.ljust(width, '❄'))

# 4.2 字符串右侧对齐， 左侧补❄:
str1 = "逆境清醒"
width = 20
print(str1.rjust(width, '❄'))
print("{}".format(str1.rjust(width, '❄')) )

# 4.3 center字符串居中对齐， 两侧侧补❄
str1 = "逆境清醒"
width = 20
print(str1.center(width, '❄'))
print("{}".format(str1.center(width, '❄')) )

# 4.4 字符串右侧对齐， 左侧补0
str1 = "逆境清醒"
width = 20
print(str1.zfill(width))
print("{}".format(str1.zfill(width)) )